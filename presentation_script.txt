Script: 

Hi! we are Fabian, Colleen, and Clay, and we have created LiveTogether!

When I first pitched this idea, I knew I wanted to build a piece of software that would help roomates solve many of the problems that arise from living together.

Together as a team, we decided on 3 core problems to solve with our software:
[SLIDE]
-Chore tracking
-Grocery lists and expenses
-Payment tracking

So without further ado, let's jump into the site and login!

[CLAY LOGS IN ON HIS FACEBOOK, AND ACCEPTS INVITATION TO HACKER HOUSE]

And now we are at the main house dashboard, which is the central hub of our site.

[SWITCH BACK TO SLIDES, SHOW SLIDE ON THE PROBLEM OF CHORES]

The problem: You've been living with roommates for a few months now, and the house is starting to look a bit of a mess. Nobody is quite sure what chores to do, or when to do them. You tried keeping a whiteboard, but it's still hard to tell who's pulling their fair share when it comes to chores.

The solution: A chore tracker that allows roomates to create, and complete chores. We knew that we wanted this dashboard portion of the site in which the chores sit to be very compelling, and we wanted instant feedback to the user without a page reload. Because of these requirements, we used a front end framework called Backbone.js to allow for a single page dashboard experience. Let's take a look.

[SWITCH TO SITE, CREATE A NEW CHORE, THEN COMPLETE IT]

Notice that the chore updates it's position in the chore list, and the due date updates as well. If you look over to the roomates panel on the right, you'll also see that the points have updated instantly as well.

[CLICK OVER TO COMPLETED CHORES]

We can now also see a log of who's completed what chores, all without a page reload. Now, let's look at some of the code to make that happen.

[SWITCH BACK TO SLIDES, JS CODE SAMPLE FOR CHORES]

Backbone allows us to split our javascript logic into individual units that each have their own job. Here is our collection, which stores all of the individual chore models. The URL tells backbone where the it can find the data on our rails backend. It knows to send a GET AJAX request to /chores to get back all of the chores in a JSON format.

When we want to render a view, we create a new view from it's constructor, passing to it the collection.

The view is responsible for creating the DOM element from the the JSON data stored in each of the collection's models.


[NEXT SLIDE, TALK ABOUT LISTS]



